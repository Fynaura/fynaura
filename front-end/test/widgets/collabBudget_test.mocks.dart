// Mocks generated by Mockito 5.4.4 from annotations
// in fynaura/test/widgets/collabBudget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/src/widgets/focus_traversal.dart' as _i8;
import 'package:flutter/src/widgets/framework.dart' as _i4;
import 'package:flutter/src/widgets/navigator.dart' as _i2;
import 'package:fynaura/services/budget_service.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTransitionDelegate_0<T> extends _i1.SmartFake
    implements _i2.TransitionDelegate<T> {
  _FakeTransitionDelegate_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNavigatorState_1 extends _i1.SmartFake
    implements _i2.NavigatorState {
  _FakeNavigatorState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeStatefulElement_2 extends _i1.SmartFake
    implements _i4.StatefulElement {
  _FakeStatefulElement_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_3 extends _i1.SmartFake
    implements _i3.DiagnosticsNode {
  _FakeDiagnosticsNode_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i3.TextTreeConfiguration? parentConfiguration,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [BudgetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBudgetService extends _i1.Mock implements _i5.BudgetService {
  MockBudgetService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl => (super.noSuchMethod(
        Invocation.getter(#baseUrl),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#baseUrl),
        ),
      ) as String);

  @override
  _i7.Future<List<Map<String, dynamic>>> getBudgets() => (super.noSuchMethod(
        Invocation.method(
          #getBudgets,
          [],
        ),
        returnValue: _i7.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i7.Future<List<Map<String, dynamic>>>);

  @override
  _i7.Future<void> createBudget(
    String? name,
    double? amount,
    String? date,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createBudget,
          [
            name,
            amount,
            date,
            userId,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteBudget(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteBudget,
          [id],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> addTransaction(
    String? budgetId,
    String? description,
    double? amount,
    bool? isExpense,
    String? addedBy,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTransaction,
          [
            budgetId,
            description,
            amount,
            isExpense,
            addedBy,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<List<Map<String, dynamic>>> getTransactions(String? budgetId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransactions,
          [budgetId],
        ),
        returnValue: _i7.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i7.Future<List<Map<String, dynamic>>>);
}

/// A class which mocks [Navigator].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigator extends _i1.Mock implements _i2.Navigator {
  MockNavigator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.Page<dynamic>> get pages => (super.noSuchMethod(
        Invocation.getter(#pages),
        returnValue: <_i2.Page<dynamic>>[],
      ) as List<_i2.Page<dynamic>>);

  @override
  _i2.TransitionDelegate<dynamic> get transitionDelegate => (super.noSuchMethod(
        Invocation.getter(#transitionDelegate),
        returnValue: _FakeTransitionDelegate_0<dynamic>(
          this,
          Invocation.getter(#transitionDelegate),
        ),
      ) as _i2.TransitionDelegate<dynamic>);

  @override
  List<_i2.NavigatorObserver> get observers => (super.noSuchMethod(
        Invocation.getter(#observers),
        returnValue: <_i2.NavigatorObserver>[],
      ) as List<_i2.NavigatorObserver>);

  @override
  _i8.TraversalEdgeBehavior get routeTraversalEdgeBehavior =>
      (super.noSuchMethod(
        Invocation.getter(#routeTraversalEdgeBehavior),
        returnValue: _i8.TraversalEdgeBehavior.closedLoop,
      ) as _i8.TraversalEdgeBehavior);

  @override
  _i2.RouteListFactory get onGenerateInitialRoutes => (super.noSuchMethod(
        Invocation.getter(#onGenerateInitialRoutes),
        returnValue: (
          _i2.NavigatorState navigator,
          String initialRoute,
        ) =>
            <_i2.Route<dynamic>>[],
      ) as _i2.RouteListFactory);

  @override
  bool get reportsRouteUpdateToEngine => (super.noSuchMethod(
        Invocation.getter(#reportsRouteUpdateToEngine),
        returnValue: false,
      ) as bool);

  @override
  bool get requestFocus => (super.noSuchMethod(
        Invocation.getter(#requestFocus),
        returnValue: false,
      ) as bool);

  @override
  _i2.NavigatorState createState() => (super.noSuchMethod(
        Invocation.method(
          #createState,
          [],
        ),
        returnValue: _FakeNavigatorState_1(
          this,
          Invocation.method(
            #createState,
            [],
          ),
        ),
      ) as _i2.NavigatorState);

  @override
  _i4.StatefulElement createElement() => (super.noSuchMethod(
        Invocation.method(
          #createElement,
          [],
        ),
        returnValue: _FakeStatefulElement_2(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
      ) as _i4.StatefulElement);

  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShort,
            [],
          ),
        ),
      ) as String);

  @override
  void debugFillProperties(_i3.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String toStringShallow({
    String? joiner = r', ',
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringShallow,
          [],
          {
            #joiner: joiner,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShallow,
            [],
            {
              #joiner: joiner,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  String toStringDeep({
    String? prefixLineOne = r'',
    String? prefixOtherLines,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringDeep,
          [],
          {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #toStringDeep,
            [],
            {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  _i3.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i3.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_3(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i3.DiagnosticsNode);

  @override
  List<_i3.DiagnosticsNode> debugDescribeChildren() => (super.noSuchMethod(
        Invocation.method(
          #debugDescribeChildren,
          [],
        ),
        returnValue: <_i3.DiagnosticsNode>[],
      ) as List<_i3.DiagnosticsNode>);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}
